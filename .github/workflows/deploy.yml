name: Deploy to Azure
run-name: ${{ github.actor }} started deployment AVD and AKS with GitHub Actions

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

defaults: 
  run:
    shell: pwsh

env:
  TenantID: ${{ secrets.AZURE_TENANT_ID }}
  AppID: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
  Subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #AppSecret: ${{ secrets.CLIENT_SECRET }}
  #FKEYPW: ${{ secrets.FKEYPW }}
  #SubscriptionPrefix: ''
  #AdminGroup: 'IaC-Owner'
  ModulesPath: ''
  Location: 'norwayeast'
  aks-resourceGroupName: 'aks-kubernetes-arc-rg'
  KeyVaultName: '-kv'
jobs:
  create-app-registration-dev:
    runs-on: ubuntu-latest
    environment: dev
    env:
      environmentName: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

            
    - name: Install Azure module to resolve Token issue
      uses: ./.github/actions/az-install
      with:
        version: 11.6.0          # This version of PS remediates the OIDC token expiry issue - #10249


    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: Install PowerShell Modules
      shell: pwsh
      run: |
        Install-Module Az.Accounts -Force
        Install-Module Az.Resources -Force
        Install-Module Az.Network -Force
        Install-Module Az.Compute -Force
        Install-Module -Name AzureAD -Force -AllowClobber
        Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force
        Install-Module Az.KeyVault -Repository PSGallery -Force

    - name: Create App Registration and Service Principal
      shell: pwsh
      run: |
        $subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        $resourceGroupName = "${{ env.aks-resourceGroupName }}-${{ env.environmentName }}"
        $location = "${{ env.Location }}"
        $keyVaultName = "${{ env.aks-resourceGroupName }}-${{ env.environmentName }}-${{ env.KeyVaultName }}"

        # Login to Azure
        Connect-AzAccount
        Set-AzContext -SubscriptionId $subscriptionId

        # Create Resource Group
        New-AzResourceGroup -Name $resourceGroupName -Location $location

        # Create Key Vault
        New-AzKeyVault -ResourceGroupName $resourceGroupName -VaultName $keyVaultName -Location $location

        # Create App Registration and Service Principal
        $app = New-AzADApplication -DisplayName "AKSClusterApp" -IdentifierUris "http://AKSClusterApp"
        $sp = New-AzADServicePrincipal -ApplicationId $app.ApplicationId
        $spPassword = New-AzADSpCredential -ObjectId $sp.Id -EndDate (Get-Date).AddYears(1)

        # Store credentials in Key Vault
        $secret = ConvertTo-SecureString -String $spPassword.SecretText -AsPlainText -Force
        Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "SP-ClientSecret" -SecretValue $secret
        Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "SP-ClientId" -SecretValue (ConvertTo-SecureString -String $sp.ApplicationId -AsPlainText -Force)

        # Output Service Principal details
        Write-Output "Service Principal ID: $($sp.ApplicationId)"
        Write-Output "Service Principal Secret: $($spPassword.SecretText)"

        echo "AZURE_CLIENT_ID=$($sp.ApplicationId)" >> $GITHUB_ENV
        echo "AZURE_CLIENT_SECRET=$($spPassword.SecretText)" >> $GITHUB_ENV

    - name: Assign Roles to Service Principal
      run: |
        az role assignment create --assignee ${{ env.AZURELOCALSOLUTIONIAC_CLIENTID }} --role Contributor --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: create-app-registration-dev
    environment: dev
    env:
      environmentName: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v2


    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_AZURELOCALSOLUTIONIAC_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Bicep
      shell: pwsh
      run: |
        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/main.bicep" `
          -resourceGroupName "${{ env.SubscriptionPrefix }}-${{ env.resourceGroupName }}-${{ env.environmentName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/aks.json" `
          -location "${{ env.Location }}" `
          -UserAssignedIdentitiesClient_ID "${{ secrets.USERASSIGNEDIDENTITIES_CLIENTID }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}"

  # Disable QA and PROD jobs for now
  # create-app-registration-qa:
  #   runs-on: ubuntu-latest
  #   environment: qa
  #   env:
  #     environmentName: qa

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #   - name: Install PowerShell Modules
  #     shell: pwsh
  #     run: |
  #       Install-Module Az.Accounts -Force
  #       Install-Module Az.Resources -Force
  #       Install-Module Az.Network -Force
  #       Install-Module Az.Compute -Force
  #       Install-Module -Name AzureAD -Force -AllowClobber
  #       Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force
  #       Install-Module Az.KeyVault -Repository PSGallery -Force

  #   - name: Create App Registration and Service Principal
  #     shell: pwsh
  #     run: |
  #       $subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  #       $resourceGroupName = "${{ env.resourceGroupName }}-${{ env.environmentName }}"
  #       $location = "${{ env.Location }}"
  #       $keyVaultName = "${{ env.KeyVaultName }}"

  #       # Login to Azure
  #       Connect-AzAccount
  #       Set-AzContext -SubscriptionId $subscriptionId

  #       # Create Resource Group
  #       New-AzResourceGroup -Name $resourceGroupName -Location $location

  #       # Create Key Vault
  #       New-AzKeyVault -ResourceGroupName $resourceGroupName -VaultName $keyVaultName -Location $location

  #       # Create App Registration and Service Principal
  #       $app = New-AzADApplication -DisplayName "AKSClusterApp" -IdentifierUris "http://AKSClusterApp"
  #       $sp = New-AzADServicePrincipal -ApplicationId $app.ApplicationId
  #       $spPassword = New-AzADSpCredential -ObjectId $sp.Id -EndDate (Get-Date).AddYears(1)

  #       # Store credentials in Key Vault
  #       $secret = ConvertTo-SecureString -String $spPassword.SecretText -AsPlainText -Force
  #       Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "SP-ClientSecret" -SecretValue $secret
  #       Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "SP-ClientId" -SecretValue (ConvertTo-SecureString -String $sp.ApplicationId -AsPlainText -Force)

  #       # Output Service Principal details
  #       Write-Output "Service Principal ID: $($sp.ApplicationId)"
  #       Write-Output "Service Principal Secret: $($spPassword.SecretText)"

  #       echo "AZURE_CLIENT_ID=$($sp.ApplicationId)" >> $GITHUB_ENV
  #       echo "AZURE_CLIENT_SECRET=$($spPassword.SecretText)" >> $GITHUB_ENV

  #   - name: Assign Roles to Service Principal
  #     run: |
  #       az role assignment create --assignee ${{ env.AZURE_CLIENT_ID }} --role Contributor --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # deploy-qa:
  #   runs-on: ubuntu-latest
  #   needs: create-app-registration-qa
  #   environment: qa
  #   env:
  #     environmentName: qa

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Bicep
  #     uses: Azure/setup-bicep@v1

  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       client-id: ${{ env.AZURE_CLIENT_ID }}

  #   - name: Deploy Bicep
  #     shell: pwsh
  #     run: |
  #       New-AzSubscriptionDeployment -Name "Deployment-QA-${{ github.actor }}-$(get-random)" `
  #         -TemplateFile "bicep/main.bicep" `
  #         -resourceGroupName "${{ env.SubscriptionPrefix }}-${{ env.resourceGroupName }}-${{ env.environmentName }}" `
  #         -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
  #         -TemplateParameterFile "json/aks.json" `
  #         -location "${{ env.Location }}" `
  #         -UserAssignedIdentitiesClient_ID "${{ secrets.USERASSIGNEDIDENTITIES_CLIENTID }}" `
  #         -tenantId "${{ secrets.AZURE_TENANT_ID }}"

  # create-app-registration-prod:
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   env:
  #     environmentName: prod

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #   - name: Install PowerShell Modules
  #     shell: pwsh
  #     run: |
  #       Install-Module Az.Accounts -Force
  #       Install-Module Az.Resources -Force
  #       Install-Module Az.Network -Force
  #       Install-Module Az.Compute -Force
  #       Install-Module -Name AzureAD -Force -AllowClobber
  #       Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force
  #       Install-Module Az.KeyVault -Repository PSGallery -Force

  #   - name: Create App Registration and Service Principal
  #     shell: pwsh
  #     run: |
  #       $subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  #       $resourceGroupName = "${{ env.resourceGroupName }}-${{ env.environmentName }}"
  #       $location = "${{ env.Location }}"
  #       $keyVaultName = "${{ env.KeyVaultName }}"

  #       # Login to Azure
  #       Connect-AzAccount
  #       Set-AzContext -SubscriptionId $subscriptionId

  #       # Create Resource Group
  #       New-AzResourceGroup -Name $resourceGroupName -Location $location

  #       # Create Key Vault
  #       New-AzKeyVault -ResourceGroupName $resourceGroupName -VaultName $keyVaultName -Location $location

  #       # Create App Registration and Service Principal
  #       $app = New-AzADApplication -DisplayName "AKSClusterApp" -IdentifierUris "http://AKSClusterApp"
  #       $sp = New-AzADServicePrincipal -ApplicationId $app.ApplicationId
  #       $spPassword = New-AzADSpCredential -ObjectId $sp.Id -EndDate (Get-Date).AddYears(1)

  #       # Store credentials in Key Vault
  #       $secret = ConvertTo-SecureString -String $spPassword.SecretText -AsPlainText -Force
  #       Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "SP-ClientSecret" -SecretValue $secret
  #       Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "SP-ClientId" -SecretValue (ConvertTo-SecureString -String $sp.ApplicationId -AsPlainText -Force)

  #       # Output Service Principal details
  #       Write-Output "Service Principal ID: $($sp.ApplicationId)"
  #       Write-Output "Service Principal Secret: $($spPassword.SecretText)"

  #       echo "AZURE_CLIENT_ID=$($sp.ApplicationId)" >> $GITHUB_ENV
  #       echo "AZURE_CLIENT_SECRET=$($spPassword.SecretText)" >> $GITHUB_ENV

  #   - name: Assign Roles to Service Principal
  #     run: |
  #       az role assignment create --assignee ${{ env.AZURE_CLIENT_ID }} --role Contributor --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # deploy-prod:
  #   runs-on: ubuntu-latest
  #   needs: create-app-registration-prod
  #   environment: prod
  #   env:
  #     environmentName: prod

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Bicep
  #     uses: Azure/setup-bicep@v1

  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       client-id: ${{ env.AZURE_CLIENT_ID }}

  #   - name: Deploy Bicep
  #     shell: pwsh
  #     run: |
  #       New-AzSubscriptionDeployment -Name "Deployment-PROD-${{ github.actor }}-$(get-random)" `
  #         -TemplateFile "bicep/main.bicep" `
  #         -resourceGroupName "${{ env.SubscriptionPrefix }}-${{ env.resourceGroupName }}-${{ env.environmentName }}" `
  #         -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
  #         -TemplateParameterFile "json/aks.json" `
  #         -location "${{ env.Location }}" `
  #         -UserAssignedIdentitiesClient_ID "${{ secrets.USERASSIGNEDIDENTITIES_CLIENTID }}" `
  #         -tenantId "${{ secrets.AZURE_TENANT_ID }}"