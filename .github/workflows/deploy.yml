name: Deploy to Azure
run-name: ${{ github.actor }} started deployment AVD and AKS with GitHub Actions

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

defaults: 
  run:
    shell: pwsh

env:
  TenantID: ${{ secrets.TENANT_ID }}
  AppID: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
  Subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  Location: 'norwayeast'
  aks-resourceGroupName: 'aks-kubernetes-arc-rg'
  avd-resourceGroupName: 'avd-resource-group'
  KeyVaultName: '-kv'
  aksCluster1ClientID: ${{ secrets.COOLAKSCLUSTER1_CLIENTID }}
  aksCluster1Secret: ${{ secrets.COOLAKSCLUSTER1_SECRET }}
  aksCluster2ClientID: ${{ secrets.COOLAKSCLUSTER2_CLIENTID }}
  aksCluster2Secret: ${{ secrets.COOLAKSCLUSTER2_SECRET }}
  
jobs:
  dev:
    runs-on: ubuntu-latest
    environment: dev
    env:
      environmentName: dev

    steps:
    - name: ðŸ¤‘ðŸ’¸Checkout parameter
      uses: actions/checkout@v3

    - name: Install Azure module to resolve Token issue
      uses: ./.github/actions/az-install
      with:
        version: 11.6.0          # This version of PS remediates the OIDC token expiry issue - #10249

    - name: ðŸ¥³ Connect to Azure
      id: azure-login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: Install PowerShell Modules
      shell: pwsh
      run: |
        Install-Module Az.Accounts -Force
        Install-Module Az.Resources -Force
        Install-Module Az.Network -Force
        Install-Module Az.Compute -Force
        Install-Module -Name AzureAD -Force -AllowClobber
        Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force
        Install-Module Az.KeyVault -Repository PSGallery -Force

    - name: Deploy Resource Group for AKS
      shell: pwsh
      run: |
        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/resourcegroup.bicep" `
          -resourceGroupName "${{ env.aks-resourceGroupName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/deploy-resource-group-aks.json" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}"

    - name: Deploy Resource Group for AVD
      shell: pwsh
      run: |
        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/resourcegroup.bicep" `
          -resourceGroupName "${{ env.avd-resourceGroupName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/deploy-resource-group-avd.json" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}"

    - name: Check if SSH Keys Exist for AKS and AVD
      id: check-keys
      run: |
        az sshkey show --name "sshkey-aks-kubernetes-arc-rg-dev" --resource-group "aks-kubernetes-arc-rg-dev" || echo "Key does not exist" > aks_key_status.txt
        az sshkey show --name "sshkey-avd-resource-group-dev" --resource-group "${{ env.avd-resourceGroupName }}-dev" || echo "Key does not exist" > avd_key_status.txt

    - name: Create SSH Keys if Not Exist for AKS and AVD
      run: |
        if grep -q 'Key does not exist' aks_key_status.txt; then
          az sshkey create --name "sshkey-aks-kubernetes-arc-rg-dev" --resource-group "aks-kubernetes-arc-rg-dev"
        fi
        if grep -q 'Key does not exist' avd_key_status.txt; then
          az sshkey create --name "sshkey-avd-resource-group-dev" --resource-group "${{ env.avd-resourceGroupName }}-dev"
        fi

    - name: Retrieve SSH Public and Private Keys for AKS and AVD
      run: |
        az sshkey show --name "sshkey-aks-kubernetes-arc-rg-dev" --resource-group "aks-kubernetes-arc-rg-dev" --query publicKey -o tsv > sshkey-aks-kubernetes-arc-rg-dev.pub
        az sshkey show --name "sshkey-aks-kubernetes-arc-rg-dev" --resource-group "aks-kubernetes-arc-rg-dev" --query privateKey -o tsv > sshkey-aks-kubernetes-arc-rg-dev
        az sshkey show --name "sshkey-avd-resource-group-dev" --resource-group "${{ env.avd-resourceGroupName }}-dev" --query publicKey -o tsv > sshkey-avd-resource-group-dev.pub
        az sshkey show --name "sshkey-avd-resource-group-dev" --resource-group "${{ env.avd-resourceGroupName }}-dev" --query privateKey -o tsv > sshkey-avd-resource-group-dev

    - name: Store SSH Private Keys in Secrets for AKS and AVD
      run: |
        echo "::add-mask::$(cat sshkey-aks-kubernetes-arc-rg-dev)"
        echo "$(cat sshkey-aks-kubernetes-arc-rg-dev)" | gh secret set SSH_PRIVATE_KEY_AKS
        echo "::add-mask::$(cat sshkey-avd-resource-group-dev)"
        echo "$(cat sshkey-avd-resource-group-dev)" | gh secret set SSH_PRIVATE_KEY_AVD

    - name: Store SSH Public Keys in Secrets for AKS and AVD
      run: |
        echo "::add-mask::$(cat sshkey-aks-kubernetes-arc-rg-dev.pub)"
        echo "$(cat sshkey-aks-kubernetes-arc-rg-dev.pub)" | gh secret set SSH_PUBLIC_KEY_AKS
        echo "::add-mask::$(cat sshkey-avd-resource-group-dev.pub)"
        echo "$(cat sshkey-avd-resource-group-dev.pub)" | gh secret set SSH_PUBLIC_KEY_AVD

    - name: Force Overwrite SSH Key Pair using ssh-keygen for AKS and AVD
      run: |
        ssh-keygen -t rsa -b 4096 -f sshkey-aks-kubernetes-arc-rg-dev -N "" -y
        ssh-keygen -t rsa -b 4096 -f sshkey-avd-resource-group-dev -N "" -y
        cat sshkey-aks-kubernetes-arc-rg-dev.pub
        cat sshkey-avd-resource-group-dev.pub

    - name: Deploy Bicep for AKS
      shell: pwsh
      run: |
        $aksCluster1ClientID = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER1_CLIENTID }}" -AsPlainText -Force
        $aksCluster1ClientSecret = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER1_SECRET }}" -AsPlainText -Force
        $aksCluster2ClientID = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER2_CLIENTID }}" -AsPlainText -Force
        $aksCluster2ClientSecret = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER2_SECRET }}" -AsPlainText -Force

        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/main.bicep" `
          -resourceGroupName "${{ env.aks-resourceGroupName }}-${{ env.environmentName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/aks.json" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}" `
          -aksCluster1ClientID $aksCluster1ClientID `
          -aksCluster1ClientSecret $aksCluster1ClientSecret `
          -aksCluster2ClientID $aksCluster2ClientID `
          -aksCluster2ClientSecret $aksCluster2ClientSecret

