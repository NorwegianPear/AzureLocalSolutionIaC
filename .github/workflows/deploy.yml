name: Deploy to Azure
run-name: ${{ github.actor }} started deployment AVD and AKS with GitHub Actions

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write

defaults: 
  run:
    shell: pwsh

env:
  TenantID: ${{ secrets.TENANT_ID }}
  AppID: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
  Subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  Location: 'norwayeast'
  aks-resourceGroupName: 'aks-kubernetes-arc-rg'
  avd-resourceGroupName: 'avd-resource-group'
  KeyVaultName: '-kv'
  aksCluster1ClientID: ${{ secrets.COOLAKSCLUSTER1_CLIENTID }}
  aksCluster1Secret: ${{ secrets.COOLAKSCLUSTER1_SECRET }}
  aksCluster2ClientID: ${{ secrets.COOLAKSCLUSTER2_CLIENTID }}
  aksCluster2Secret: ${{ secrets.COOLAKSCLUSTER2_SECRET }}
  
jobs:
  dev:
    runs-on: ubuntu-latest
    environment: dev
    env:
      environmentName: dev

    steps:
    - name: ðŸ¤‘ðŸ’¸Checkout parameter
      uses: actions/checkout@v3

    - name: Install Azure module to resolve Token issue
      uses: ./.github/actions/az-install
      with:
        version: 11.6.0          # This version of PS remediates the OIDC token expiry issue - #10249

    - name: ðŸ¥³ Connect to Azure
      id: azure-login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: Install PowerShell Modules
      shell: pwsh
      run: |
        Install-Module Az.Accounts -Force
        Install-Module Az.Resources -Force
        Install-Module Az.Network -Force
        Install-Module Az.Compute -Force
        Install-Module -Name AzureAD -Force -AllowClobber
        Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force
        Install-Module Az.KeyVault -Repository PSGallery -Force

    - name: Deploy Resource Group for AKS
      shell: pwsh
      run: |
        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/resourcegroup.bicep" `
          -resourceGroupName "${{ env.aks-resourceGroupName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/deploy-resource-group-aks.json" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}"

    - name: Deploy Resource Group for AVD
      shell: pwsh
      run: |
        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/resourcegroup.bicep" `
          -resourceGroupName "${{ env.avd-resourceGroupName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/deploy-resource-group-avd.json" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}"

    - name: Ensure SSH Keys for AKS and AVD
      shell: pwsh
      run: |
        # Generate SSH keys locally
        ssh-keygen -t rsa -b 4096 -f $HOME/.ssh/sshkey-aks-kubernetes-arc-rg-dev -N ""
        ssh-keygen -t rsa -b 4096 -f $HOME/.ssh/sshkey-avd-resource-group-dev -N ""

        # Upload SSH keys to Azure
        az sshkey create --name "sshkey-aks-kubernetes-arc-rg-dev" --resource-group "${{ env.aks-resourceGroupName }}-${{env.environmentName}}" --location "norwayeast" --public-key "@$HOME/.ssh/sshkey-aks-kubernetes-arc-rg-dev.pub"
        az sshkey create --name "sshkey-avd-resource-group-dev" --resource-group "${{ env.avd-resourceGroupName }}-${{env.environmentName}}" --location "norwayeast" --public-key "@$HOME/.ssh/sshkey-avd-resource-group-dev.pub"

    - name: Store SSH Private Keys in Secrets for AKS and AVD
      shell: pwsh
      run: |
        $privateKeyAks = Get-Content -Raw -Path "$HOME/.ssh/sshkey-aks-kubernetes-arc-rg-dev"
        $privateKeyAvd = Get-Content -Raw -Path "$HOME/.ssh/sshkey-avd-resource-group-dev"
        echo "::add-mask::$privateKeyAks"
        echo $privateKeyAks | gh secret set SSH_PRIVATE_KEY_AKS --body -
        echo "::add-mask::$privateKeyAvd"
        echo $privateKeyAvd | gh secret set SSH_PRIVATE_KEY_AVD --body -

    - name: Store SSH Public Keys in Secrets for AKS and AVD
      shell: pwsh
      run: |
        $publicKeyAks = Get-Content -Raw -Path "$HOME/.ssh/sshkey-aks-kubernetes-arc-rg-dev.pub"
        $publicKeyAvd = Get-Content -Raw -Path "$HOME/.ssh/sshkey-avd-resource-group-dev.pub"
        echo "::add-mask::$publicKeyAks"
        echo $publicKeyAks | gh secret set SSH_PUBLIC_KEY_AKS --body -
        echo "::add-mask::$publicKeyAvd"
        echo $publicKeyAvd | gh secret set SSH_PUBLIC_KEY_AVD --body -

    - name: Deploy Azure Local and Connect On-Prem
      shell: pwsh
      run: |
        $resourceGroupName = "aks-kubernetes-arc-rg-dev"
        $location = "norwayeast"
        $machineName = "PCNOR262914"

        # Install Azure PowerShell
        Install-Module -Name Az -AllowClobber -Scope CurrentUser

        # Login to Azure
        Connect-AzAccount

        # Create Resource Group
        New-AzResourceGroup -Name $resourceGroupName -Location $location

        # Install the Connected Machine Agent
        Install-Module -Name Az.ConnectedMachine

        # Register the Machine with Azure Arc
        Connect-AzConnectedMachine -ResourceGroupName $resourceGroupName -Name $machineName -Location $location

    - name: Deploy Bicep for AKS
      shell: pwsh
      run: |
        $aksCluster1ClientID = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER1_CLIENTID }}" -AsPlainText -Force
        $aksCluster1ClientSecret = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER1_SECRET }}" -AsPlainText -Force
        $aksCluster2ClientID = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER2_CLIENTID }}" -AsPlainText -Force
        $aksCluster2ClientSecret = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER2_SECRET }}" -AsPlainText -Force

        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/main.bicep" `
          -resourceGroupName "${{ env.aks-resourceGroupName }}-${{ env.environmentName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/aks.json" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}" `
          -aksCluster1ClientID $aksCluster1ClientID `
          -aksCluster1ClientSecret $aksCluster1ClientSecret `
          -aksCluster2ClientID $aksCluster2ClientID `
          -aksCluster2ClientSecret $aksCluster2ClientSecret

