name: Deploy to Azure
run-name: ${{ github.actor }} started deployment AVD and AKS with GitHub Actions

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write

defaults: 
  run:
    shell: pwsh

env:
  TenantID: ${{ secrets.TENANT_ID }}
  AppID: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
  AppObjectID: ${{ secrets.AZURELOCALSOLUTIONIAC_OBJECTID }}
  Subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  Location: 'norwayeast'
  aks-resourceGroupName: 'aks-kubernetes-arc-rg'
  avd-resourceGroupName: 'avd-resource-group'
  aksKeyVaultName: 'aks-keyvault'
  avdKeyVaultName: 'avd-keyvault'
  aksCluster1ClientID: ${{ secrets.COOLAKSCLUSTER1_CLIENTID }}
  aksCluster1ObjectID: ${{ secrets.COOLAKSCLUSTER1_OBJECTID }}
  aksCluster1Secret: ${{ secrets.COOLAKSCLUSTER1_SECRET }}
  aksCluster2ClientID: ${{ secrets.COOLAKSCLUSTER2_CLIENTID }}
  aksCluster2ObjectID: ${{ secrets.COOLAKSCLUSTER2_OBJECTID }}
  aksCluster2Secret: ${{ secrets.COOLAKSCLUSTER2_SECRET }}
  
jobs:
  pre-dev:
    if: false
    runs-on: self-hosted
    environment: dev
    steps:
    - name: ðŸ¤‘ðŸ’¸Checkout parameter
      uses: actions/checkout@v3

    - name: Install Azure CLI
      shell: pwsh
      run: |
        if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
          Write-Host "Azure CLI not found. Installing Azure CLI..."
          try {
            Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi -TimeoutSec 600
            Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet' -Wait -NoNewWindow
            Remove-Item .\AzureCLI.msi
            Write-Host "Azure CLI installation completed. Rebooting runner..."
            Restart-Computer -Force
          } catch {
            Write-Host "Azure CLI installation failed: $_"
            exit 1
          }
        } else {
          Write-Host "Azure CLI is already installed."
        }

  dev:
    runs-on: self-hosted
    environment: dev
    #needs: pre-dev
    env:
      environmentName: dev

    steps:
    - name: ðŸ¤‘ðŸ’¸Checkout parameter
      uses: actions/checkout@v3

    - name: Ensure Runner is Started
      shell: pwsh
      run: |
        $runnerProcess = Get-Process -Name "run" -ErrorAction SilentlyContinue
        if (-not $runnerProcess) {
          Write-Host "Starting self-hosted runner..."
          Start-Process -FilePath "C:\actions-runner\run.cmd" -NoNewWindow
        } else {
          Write-Host "Self-hosted runner is already running."
        }

    - name: Install Minikube
      shell: pwsh
      run: |
        if (-not (Get-Command minikube -ErrorAction SilentlyContinue)) {
          Write-Host "Minikube not found. Installing Minikube..."
          Invoke-WebRequest -Uri https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe -OutFile minikube-installer.exe
          Start-Process -FilePath .\minikube-installer.exe -ArgumentList '/S' -Wait
          Remove-Item .\minikube-installer.exe
          Write-Host "Minikube installation completed."
        } else {
          Write-Host "Minikube is already installed."
        }

    - name: Start Minikube with elevated permissions
      shell: pwsh
      run: |
        Start-Process -FilePath "powershell" -ArgumentList "Start-Process -FilePath 'powershell' -ArgumentList 'minikube start --driver=hyperv' -Verb runAs -Wait" -Verb runAs


    - name: Install Azure CLI
      if: false
      shell: pwsh
      run: |
        if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
          Write-Host "Azure CLI not found. Installing Azure CLI..."
          try {
            Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi -TimeoutSec 600
            Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet' -Wait -NoNewWindow
            Remove-Item .\AzureCLI.msi
            $env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
            Write-Host "Azure CLI installation completed."
          } catch {
            Write-Host "Azure CLI installation failed: $_"
            exit 1
          }
        } else {
          Write-Host "Azure CLI is already installed."
        }

    - name: Verify Azure CLI installation
      if: false
      shell: pwsh
      run: |
        az --version
        if ($?) {
          Write-Host "Azure CLI version check passed."
        } else {
          Write-Host "Azure CLI version check failed."
          exit 1
        }

    - name: Check Azure CLI health
      if: false
      shell: pwsh
      run: |
        try {
          # Check if Azure CLI can list subscriptions
          $subscriptions = az account list
          if ($subscriptions) {
            Write-Host "Azure CLI health check passed."
          } else {
            Write-Host "Azure CLI health check failed."
            exit 1
          }
        } catch {
          Write-Host "Azure CLI health check encountered an error: $_"
          exit 1
        }

    - name: Install Azure Arc CLI extension
      shell: pwsh
      run: |
        az extension add --name connectedk8s
        az extension add --name k8s-extension
        az extension add --name customlocation


    - name: Install Azure module to resolve Token issue
      uses: ./.github/actions/az-install
      with:
        version: 13.2.0          # This version of PS remediates the OIDC token expiry issue - #10249

    - name: Install PowerShell Modules
      shell: pwsh
      run: |
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        $modules = @("Az.Accounts", "Az.Resources", "Az.Network", "Az.Compute", "AzureAD", "Microsoft.PowerShell.SecretManagement", "Az.KeyVault", "Az.ConnectedMachine")
        foreach ($module in $modules) {
          Write-Host "Installing module $module..."
          Install-Module -Name $module -Force -AllowClobber -ErrorAction Stop
          Write-Host "Module $module installed successfully."
        }

    - name: ðŸ¥³ Connect to Azure
      id: azure-login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    


    - name: Deploy Resource Groups and Create Key Vaults for AKS and AVD
      shell: pwsh
      run: |
        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/deploy.rg_kv.bicep" `
          -TemplateParameterFile "json/deploy.rg_kv.json" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}" `
          -azurelocalsolutioniac_clientid "${{ secrets.AZURELOCALSOLUTIONIAC_CLIENTID }}" `
          -azurelocalsolutioniac_objectid "${{ secrets.AZURELOCALSOLUTIONIAC_OBJECTID }}" `
          -aksCluster1ObjectID "${{ secrets.COOLAKSCLUSTER1_OBJECTID }}" `
          -aksCluster2ObjectID "${{ secrets.COOLAKSCLUSTER2.OBJECTID }}" `
          -aksCluster1ClientID "${{ secrets.COOLAKSCLUSTER1.CLIENTID }}" `
          -aksCluster2ClientID "${{ secrets.COOLAKSCLUSTER2.CLIENTID }}"

    - name: Generate and Store SSH Keys in Key Vaults for AKS and AVD
      shell: pwsh
      run: |
        $sshDir = "$env:HOME/.ssh"
        if (-Not (Test-Path -Path $sshDir)) {
          New-Item -ItemType Directory -Force -Path $sshDir
        }
        # Generate SSH keys locally
        ssh-keygen -t rsa -b 4096 -f "$sshDir/sshkey-aks-kubernetes-arc-rg-dev" -N ""
        ssh-keygen -t rsa -b 4096 -f "$sshDir/sshkey-avd-resource-group-dev" -N ""

        # Store SSH private keys in Key Vaults
        $privateKeyAks = Get-Content -Raw -Path "$sshDir/sshkey-aks-kubernetes-arc-rg-dev"
        $privateKeyAvd = Get-Content -Raw -Path "$sshDir/sshkey-avd-resource-group-dev"
        Set-AzKeyVaultSecret -VaultName "${{ env.aksKeyVaultName }}-${{ env.environmentName }}" -Name "SSHPrivateKeyAks" -SecretValue (ConvertTo-SecureString -String $privateKeyAks -AsPlainText -Force)
        Set-AzKeyVaultSecret -VaultName "${{ env.avdKeyVaultName }}-${{ env.environmentName }}" -Name "SSHPrivateKeyAvd" -SecretValue (ConvertTo-SecureString -String $privateKeyAvd -AsPlainText -Force)

        # Store SSH public keys in Key Vaults
        $publicKeyAks = Get-Content -Raw -Path "$sshDir/sshkey-aks-kubernetes-arc-rg-dev.pub"
        $publicKeyAvd = Get-Content -Raw -Path "$sshDir/sshkey-avd-resource-group-dev.pub"
        Set-AzKeyVaultSecret -VaultName "${{ env.aksKeyVaultName }}-${{ env.environmentName }}" -Name "SSHPublicKeyAks" -SecretValue (ConvertTo-SecureString -String $publicKeyAks -AsPlainText -Force)
        Set-AzKeyVaultSecret -VaultName "${{ env.avdKeyVaultName }}-${{ env.environmentName }}" -Name "SSHPublicKeyAvd" -SecretValue (ConvertTo-SecureString -String $publicKeyAvd -AsPlainText -Force)

    - name: Register Kubernetes Cluster with Azure Arc
      shell: pwsh
      run: |
        $resourceGroupName = "aks-kubernetes-arc-rg-dev"
        $location = "norwayeast"
        $clusterName = "coolAksCluster1"
        $sshDir = "$env:HOME/.ssh"
        if (-Not (Test-Path -Path $sshDir)) {
          New-Item -ItemType Directory -Force -Path $sshDir
        }
        $sshPrivateKey = Get-AzKeyVaultSecret -VaultName "${{ env.aksKeyVaultName }}-${{ env.environmentName }}" -Name "SSHPrivateKeyAks" -AsPlainText
        $sshPublicKey = Get-AzKeyVaultSecret -VaultName "${{ env.aksKeyVaultName }}-${{ env.environmentName }}" -Name "SSHPublicKeyAks" -AsPlainText
        Set-Content -Path "$sshDir/sshkey-aks-kubernetes-arc-rg-dev" -Value $sshPrivateKey
        Set-Content -Path "$sshDir/sshkey-aks-kubernetes-arc-rg-dev.pub" -Value $sshPublicKey

        az connectedk8s connect --name $clusterName --resource-group $resourceGroupName --location $location --ssh-private-key-path "$sshDir/sshkey-aks-kubernetes-arc-rg-dev" --ssh-public-key $sshPublicKey

    - name: Create Custom Location
      shell: pwsh
      run: |
        $resourceGroupName = "aks-kubernetes-arc-rg-dev"
        $location = "norwayeast"
        $customLocationName = "mylaptop-custom-location"
        $connectedClusterId = az connectedk8s show --name $clusterName --resource-group $resourceGroupName --query id --output tsv

        az customlocation create --resource-group $resourceGroupName --name $customLocationName --location $location --host-resource-id $connectedClusterId --namespace my-namespace

 
    - name: Register the Hyper-V Machine with Azure Arc
      shell: pwsh
      run: |
        $global:scriptPath = $myinvocation.mycommand.definition

        function Restart-AsAdmin {
            $pwshCommand = "powershell"
            if ($PSVersionTable.PSVersion.Major -ge 6) {
                $pwshCommand = "pwsh"
            }

            try {
                Write-Host "This script requires administrator permissions to install the Azure Connected Machine Agent. Attempting to restart script with elevated permissions..."
                $arguments = "-NoExit -Command `"& '$scriptPath'`"" 
                Start-Process $pwshCommand -Verb runAs -ArgumentList $arguments
                exit 0
            } catch {
                throw "Failed to elevate permissions. Please run this script as Administrator."
            }
        }

        try {
            if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
                if ([System.Environment]::UserInteractive) {
                    Restart-AsAdmin
                } else {
                    throw "This script requires administrator permissions to install the Azure Connected Machine Agent. Please run this script as Administrator."
                }
            }

            $env:SUBSCRIPTION_ID = "${{ secrets.AZURE_SUBSCRIPTION_ID }}";
            $env:RESOURCE_GROUP = "aks-kubernetes-arc-rg-dev";
            $env:TENANT_ID = "${{ secrets.AZURE_TENANT_ID }}";
            $env:LOCATION = "norwayeast";
            $env:AUTH_TYPE = "token";
            $env:CORRELATION_ID = "059e8b09-3a2f-43b8-9ad3-a7d3d8e7b9b6";
            $env:CLOUD = "AzureCloud";

            [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor 3072;

            # Download the installation package
            Invoke-WebRequest -UseBasicParsing -Uri "https://gbl.his.arc.azure.com/azcmagent-windows" -TimeoutSec 30 -OutFile "$env:TEMP\install_windows_azcmagent.ps1";

            # Install the hybrid agent
            & "$env:TEMP\install_windows_azcmagent.ps1";
            if ($LASTEXITCODE -ne 0) { exit 1; }

            # Run connect command
            & "$env:ProgramW6432\AzureConnectedMachineAgent\azcmagent.exe" connect --resource-group "$env:RESOURCE_GROUP" --tenant-id "$env:TENANT_ID" --location "$env:LOCATION" --subscription-id "$env:SUBSCRIPTION_ID" --cloud "$env:CLOUD" --correlation-id "$env:CORRELATION_ID";
        }
        catch {
            $logBody = @{
                subscriptionId = "$env:SUBSCRIPTION_ID"
                resourceGroup = "$env:RESOURCE_GROUP"
                tenantId = "$env:TENANT_ID"
                location = "$env:LOCATION"
                correlationId = "$env:CORRELATION_ID"
                authType = "$env:AUTH_TYPE"
                operation = "onboarding"
                messageType = $_.FullyQualifiedErrorId
                message = "$_"
            }
            Invoke-WebRequest -UseBasicParsing -Uri "https://gbl.his.arc.azure.com/log" -Method "PUT" -Body ($logBody | ConvertTo-Json) | out-null
            Write-Host -ForegroundColor red $_.Exception
        }

    - name: Register Kubernetes Cluster with Azure Arc
      shell: pwsh
      run: |
        $resourceGroupName = "aks-kubernetes-arc-rg-dev"
        $location = "norwayeast"
        $clusterName = "my-aks-cluster"
        $sshPublicKey = Get-AzKeyVaultSecret -VaultName "${{ env.aksKeyVaultName }}-${{ env.environmentName }}" -Name "SSHPublicKeyAks"

        # Install Azure CLI
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

        # Install Azure Arc CLI extension
        az extension add --name connectedk8s

        # Register Kubernetes cluster with Azure Arc
        az connectedk8s connect --name $clusterName --resource-group $resourceGroupName --location $location --ssh-private-key-path "$env:HOME/.ssh/sshkey-aks-kubernetes-arc-rg-dev" --ssh-public-key $sshPublicKey

    - name: Deploy Bicep for AKS
      shell: pwsh
      run: |
        $aksCluster1ClientID = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER1_CLIENTID }}" -AsPlainText -Force
        $aksCluster1ClientSecret = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER1_SECRET }}" -AsPlainText -Force
        $aksCluster2ClientID = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER2.CLIENTID }}" -AsPlainText -Force
        $aksCluster2ClientSecret = ConvertTo-SecureString -String "${{ secrets.COOLAKSCLUSTER2.SECRET }}" -AsPlainText -Force

        New-AzSubscriptionDeployment -Name "Deployment-DEV-${{ github.actor }}-$(get-random)" `
          -TemplateFile "bicep/main.bicep" `
          -resourceGroupName "${{ env.aks-resourceGroupName }}-${{ env.environmentName }}" `
          -subscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          -TemplateParameterFile "json/aks.json" `
          -location "${{ env.Location }}" `
          -tenantId "${{ secrets.AZURE_TENANT_ID }}" `
          -aksCluster1ClientID $aksCluster1ClientID `
          -aksCluster1ClientSecret $aksCluster1ClientSecret `
          -aksCluster2ClientID $aksCluster2ClientID `
          -aksCluster2ClientSecret $aksCluster2ClientSecret

    - name: Stop Self-Hosted Runner
      if: always()
      shell: pwsh
      run: |
        $runnerProcess = Get-Process -Name "run" -ErrorAction SilentlyContinue
        if ($runnerProcess) {
          Write-Host "Stopping self-hosted runner..."
          Stop-Process -Name "run" -Force
        } else {
          Write-Host "Self-hosted runner is not running."
        }