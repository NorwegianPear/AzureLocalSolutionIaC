name: Create and Store Client Secret

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create-secret:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Install Azure module to resolve Token issue
      uses: ./.github/actions/az-install
      with:
        version: 11.6.0          # This version of PS remediates the OIDC token expiry issue - #10249

    - name: Install PowerShell Modules
      shell: pwsh
      run: |
          Install-Module Az.Accounts -Force
          Install-Module Az.Resources -Force
          Install-Module Az.Network -Force
          Install-Module Az.Compute -Force
          Install-Module -Name AzureAD -Force -AllowClobber
          Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force
          Install-Module Az.KeyVault -Repository PSGallery -Force

    - name: Connect to AzureAD
      run: |
        Connect-AzureAD -TenantId ${{ secrets.AZURE_TENANT_ID }} -ApplicationId ${{ secrets.AZURE_CLIENT_ID }} -Credential (ConvertTo-SecureString -String ${{ secrets.AZURE_CLIENT_SECRET }} -AsPlainText -Force)

    - name: Create client secrets
      id: create_secrets
      run: |
        $app1 = Get-AzureADApplication -Filter "DisplayName eq 'AppRegSPA-coolAksCluster1'"
        $password1 = New-AzureADApplicationPasswordCredential -ObjectId $app1.ObjectId -CustomKeyIdentifier "myKey1" -StartDate (Get-Date) -EndDate (Get-Date).AddYears(1)
        echo "::set-output name=clientsecret1::${password1.SecretText}"

        $app2 = Get-AzureADApplication -Filter "DisplayName eq 'AppRegSPA-coolAksCluster2'"
        $password2 = New-AzureADApplicationPasswordCredential -ObjectId $app2.ObjectId -CustomKeyIdentifier "myKey2" -StartDate (Get-Date) -EndDate (Get-Date).AddYears(1)
        echo "::set-output name=clientsecret2::${password2.SecretText}"

    - name: Store secrets in GitHub Actions environment
      uses: actions/github-script@v3
      with:
        script: |
          const { secrets } = require('@actions/core');
          secrets.setSecret('clientsecret1', '${{ steps.create_secrets.outputs.clientsecret1 }}');

    - name: Store second secret in GitHub Actions environment
      uses: actions/github-script@v3
      with:
        script: |
          const { secrets } = require('@actions/core');
          secrets.setSecret('clientsecret2', '${{ steps.create_secrets.outputs.clientsecret2 }}');

    - name: Recreate secrets if needed
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "Recreating secrets..."
        $app1 = Get-AzureADApplication -Filter "DisplayName eq 'AppRegSPA-coolAksCluster1'"
        $password1 = New-AzureADApplicationPasswordCredential -ObjectId $app1.ObjectId -CustomKeyIdentifier "myKey1" -StartDate (Get-Date) -EndDate (Get-Date).AddYears(1)
        gh secret set clientsecret1 --body "${password1.SecretText}" --env dev

        $app2 = Get-AzureADApplication -Filter "DisplayName eq 'AppRegSPA-coolAksCluster2'"
        $password2 = New-AzureADApplicationPasswordCredential -ObjectId $app2.ObjectId -CustomKeyIdentifier "myKey2" -StartDate (Get-Date) -EndDate (Get-Date).AddYears(1)
        gh secret set clientsecret2 --body "${password2.SecretText}" --env dev